# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
image: ruby:3.1.2

cache:
  paths:
    - vendor/bundle

before_script:
  - |
    cd "$CI_PROJECT_DIR/api"
    bundle check || bundle install --jobs $(nproc)
    bundle exec rails db:create RAILS_ENV=test
    bundle exec rails db:schema:load RAILS_ENV=test

stages:
  - test
  - deploy

test-api:
  stage: test
  rules:
    - if: '$CI_COMMIT_REF_NAME == "prod"'
  script:
    - |
      cd "$CI_PROJECT_DIR/api"
      bundle exec rails test -d  

deploy-api:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "prod"'
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GITLAB_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh -v -p 229 ownportal@172.245.90.231 "nohup sh -c 'cd ~/ownportal/api && ./deploy.sh' < /dev/null > std.out 2> std.err &"
